#!/usr/bin/env python

import argparse
import sys
import os
import yaml
#from regmap_helper/tree import * # import node,arraynode,tree
#from tree import * # import node,arraynode,tree
#import regmap_helper/node
sys.path.append("./regmap_helper")
import build_vhdl_packages

def represent_none(self, _):
    return self.represent_scalar('tag:yaml.org,2002:null', '')

yaml.add_representer(type(None), represent_none)

class MyDumper(yaml.Dumper):
    def increase_indent(self, flow=False, indentless=False):
        return super(MyDumper, self).increase_indent(flow, False)


def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


#================================================================================
#Generate the MAP and PKG VHDL files for this slave
#================================================================================
def GenerateHDL(name,XMLFile,HDLPath,map_template_file,pkg_template_file,useSimpleParser):
  print "Generate HDL for",name,"from",XMLFile
  #get working directory
  wd=os.getcwd()

  build_vhdl_packages.build_vhdl_packages(useSimpleParser,
                                          False,
                                          False,
                                          os.path.abspath(map_template_file),
                                          None,
                                          os.path.abspath(wd+"/"+HDLPath),
                                          os.path.abspath(wd+"/"+XMLFile),
                                          name)




#================================================================================
#process a single slave (or tree us sub-slaves) and update all the output files
#================================================================================
def LoadSlave(name,slave,dtsiYAML,aTableYAML,parentName,map_template_file,pkg_template_file,useSimpleParser):
  
  fullName=parentName+str(name)

  #Build HDL for this file
  if 'HDL' in slave:
    if 'XML' not in slave:
        raise RuntimeError(fullName+" has HDL tag, but no XML tag\n")
    if 'out_dir' not in slave['HDL']:
        raise RuntimeError(fullName+" has HDL tag, but no out_dir tag\n")
    if 'map_template' in slave['HDL']:
        map_template_file = "regmap_helper/templates/"+slave['HDL']['map_template']
    if 'pkg_template' in slave['HDL']:
        pkg_template_file = "regmap_helper/templates/"+slave['HDL']['pkg_template']
    print map_template_file
    GenerateHDL(fullName,slave['XML'][0],slave['HDL']['out_dir'],map_template_file,pkg_template_file,useSimpleParser)

  #generate yaml for the kernel and centos build
  if 'UHAL_BASE' in slave:
    if 'XML' in slave:
      #update list dtsi files to look for (.dtsi_chunk or .dtsi_post_chunk)
      dtsiYAML[fullName]=None
      #update the address table file
      
      aTableYAML[fullName]={
          "UHAL_BASE":"0x"+hex(slave['UHAL_BASE'])[2:].zfill(8),
          "XML":slave['XML']}
      
    else:
      return

  #Handle and additional slaves generated by the TCL command
  if 'SUB_SLAVES' in slave:
    if slave['SUB_SLAVES'] != None:
      for subSlave in slave['SUB_SLAVES']:
        LoadSlave(subSlave,
                  slave['SUB_SLAVES'][subSlave],
                  dtsiYAML,
                  aTableYAML,
                  fullName,
                  map_template_file,
                  pkg_template_file)





def main(#addSlaveTCLPath, 
         dtsiSlavesFile, addressTableSlavesFile, slavesFileName,map_template_file,pkg_template_file,useSimpleParser):
  # configure logger
  global log

    
  #dtsi yaml file
  dtsiYAMLFile=open(dtsiSlavesFile,"w")
  dtsiYAML = dict()

  #address table yaml file
  addressTableYAMLFile=open(addressTableSlavesFile,"w")
  aTableYAML = dict()

  #source slave yaml to drive the rest of the build
  slavesFile=open(slavesFileName)
  slaves=yaml.load(slavesFile)
  for slave in slaves['AXI_SLAVES']:
    #update all the files for this slave
    LoadSlave(slave,
              slaves["AXI_SLAVES"][slave],
              dtsiYAML,
              aTableYAML,
              "",
              map_template_file,
              pkg_template_file,
              useSimpleParser)

  dtsiYAML={"DTSI_CHUNKS": dtsiYAML}
  aTableYAML={"UHAL_MODULES": aTableYAML}
  
  dtsiYAMLFile.write(yaml.dump(dtsiYAML,
                               Dumper=MyDumper,
                               default_flow_style=False))
  addressTableYAMLFile.write(yaml.dump(aTableYAML,
                                       Dumper=MyDumper,
                                       default_flow_style=False))


if __name__ == "__main__":
  #command line
  parser = argparse.ArgumentParser(description="Create auto-generated files for the build system.")
  parser.add_argument("--slavesFile","-s"         ,help="YAML file storing the slave info for generation",required=True)
#  parser.add_argument("--addSlaveTCLPath","-t"    ,help="Path for AddSlaves.tcl",required=True)
  parser.add_argument("--addressTableSlavesFile","-a"   ,help="File for address table generation yaml",required=True)
  parser.add_argument("--dtsiSlavesFile","-d"           ,help="File for dtsi yaml",required=True)
  parser.add_argument("--mapTemplate","-m"        ,help="Path for map_template file",required=False)
  parser.add_argument("--pkgTemplate","-p"        ,help="Path for pkg_template file",required=False)
  parser.add_argument("--useSimpleParser","-u"        ,type=str2bool,help="Use simple parser",required=False,default=True)
  args=parser.parse_args()
  main(#addSlaveTCLPath        = args.addSlaveTCLPath, 
       dtsiSlavesFile         = args.dtsiSlavesFile, 
       addressTableSlavesFile = args.addressTableSlavesFile, 
       slavesFileName         = args.slavesFile,
       map_template_file      = args.mapTemplate,
       pkg_template_file      = args.pkgTemplate,
       useSimpleParser        = args.useSimpleParser)
